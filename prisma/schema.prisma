generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  quota     BigInt      @default(10737418240)
  usedSpace Int      @default(0)
  files     File[]
  folders   Folder[]
  shares    Share[]
  tokens    RefreshToken[]
  trash     Trash[]
  webhooks  Webhook[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          String   @id @default(uuid())
  name        String
  path        String
  size        Int
  type        String
  width       Int?
  height      Int?
  duration    Int?
  format      String?
  cdnUrl      String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  folder      Folder?  @relation(fields: [folderId], references: [id])
  folderId    String?
  versions    FileVersion[]
  sharedWith  Share[]
  tags        Tag[]    @relation("FileTags")
  trashed     Boolean  @default(false)
  trash       Trash?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  parentId  String?
  files     File[]
  folders   Folder[] @relation("FolderToFolder")
  shares    Share[]
  trashed   Boolean  @default(false)
  trash     Trash[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileVersion {
  id        String   @id @default(uuid())
  file      File     @relation(fields: [fileId], references: [id])
  fileId    String
  path      String
  size      Int
  createdAt DateTime @default(now())
}

model Share {
  id        String   @id @default(uuid())
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    String?  @unique
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  permission SharePermission
  createdAt DateTime @default(now())
}

enum SharePermission {
  READ
  WRITE
}

model Trash {
  id        String   @id @default(uuid())
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    String?  @unique
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  deletedAt DateTime @default(now())
}

model Tag {
  id    String  @id @default(uuid())
  name  String  @unique
  files File[]  @relation("FileTags")
}

model Webhook {
  id        String   @id @default(uuid())
  event     String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
